install.packages("rJava")
exit()
R CMD javareconf
quit()
install.package(rJava)
install.packages("rJava")
quit()
devtools::install_github("FarnazFouladi/HashSeq")
quit()
devtools::install_github("FarnazFouladi/HashSeq")
install.packages("rJava")
quit()
home_dir <- file.path('~','git','balance_tree_exploration')
project <- "Vanderbilt"
output_dir <- file.path(home_dir, project, 'output')
print("Read data.")
hashseq <- data.frame(data.table::fread(file = file.path(output_dir,"hashseq", "SvTable.txt"),
                                        header=TRUE, data.table=FALSE), row.names = 1)
# hashseq <- hashseq[, colSums(hashseq != 0) > 0.01*nrow(hashseq)]#remove columns that don't have at least 10%
# print(paste("HashSeq has", ncol(hashseq), "columns after column reduction."))
print("Removing '_' ")
my_names <- c()
for (x in row.names(hashseq)){
  my_name <- strsplit(x,"_")[[1]][1]
  # print(my_name)
  my_names <- c(my_name, my_names)
}
# my_names <- sapply(as.character(row.names(hashseq)), function(x) {
#   strsplit(x,"_")[[1]][1]
#   })
row.names(hashseq) <- my_names
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = ""))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 1:10), collapse = ""))
print(paste("number of elements:", nrow(hashseq), collapse = ""))
print(paste(row.names(hashseq)[1:10], collapse = " "))
print(paste(tail(row.names(hashseq), 1:10), collapse = " "))
print(paste(tail(row.names(hashseq), 10), collapse = " "))
home_dir <- file.path('~','git','balance_tree_exploration')
project <- "Vanderbilt"
output_dir <- file.path(home_dir, project, 'output')
print("Read data.")
hashseq <- data.frame(data.table::fread(file = file.path(output_dir,"hashseq", "SvTable.txt"),
                                        header=TRUE, data.table=FALSE), row.names = 1)
asv_table <- data.frame(readRDS(file.path(output_dir, "r_objects", "ForwardReads_DADA2.rds")))
# hashseq <- hashseq[, colSums(hashseq != 0) > 0.01*nrow(hashseq)]#remove columns that don't have at least 10%
# print(paste("HashSeq has", ncol(hashseq), "columns after column reduction."))
print("Removing '_' ")
my_names <- c()
for (x in row.names(hashseq)){
  my_name <- strsplit(x,"_")[[1]][1]
  # print(my_name)
  my_names <- c(my_name, my_names)
}
# my_names <- sapply(as.character(row.names(hashseq)), function(x) {
#   strsplit(x,"_")[[1]][1]
#   })
row.names(hashseq) <- my_names
print("Fixed formating of row names.")
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("number of elements:", nrow(hashseq), collapse = " "))
print("Attempting to reorder rownames based on ASV table from dada2")
hashseq <- hashseq[match(row.names(asv_table), row.names(hashseq)),]
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("number of elements:", nrow(hashseq), collapse = " "))
print("Writing munged hashseq table.")
write.table(hashseq, file = file.path(output_dir,"hashseq", "hashseq.csv"), 
            sep = ",")
print("R script completed.")
order(row.names(hashseq))
home_dir <- file.path('~','git','balance_tree_exploration')
project <- "Vanderbilt"
output_dir <- file.path(home_dir, project, 'output')
print("Read data.")
hashseq <- data.frame(data.table::fread(file = file.path(output_dir,"hashseq", "SvTable.txt"),
                                        header=TRUE, data.table=FALSE), row.names = 1)
asv_table <- data.frame(readRDS(file.path(output_dir, "r_objects", "ForwardReads_DADA2.rds")))
# hashseq <- hashseq[, colSums(hashseq != 0) > 0.01*nrow(hashseq)]#remove columns that don't have at least 10%
# print(paste("HashSeq has", ncol(hashseq), "columns after column reduction."))
print("Removing '_' ")
my_names <- c()
for (x in row.names(hashseq)){
  my_name <- strsplit(x,"_")[[1]][1]
  # print(my_name)
  my_names <- c(my_name, my_names)
}
# my_names <- sapply(as.character(row.names(hashseq)), function(x) {
#   strsplit(x,"_")[[1]][1]
#   })
row.names(hashseq) <- my_names
print("Fixed formating of row names.")
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("number of elements:", nrow(hashseq), collapse = " "))
print("Attempting to reorder rownames based on ASV table from dada2\n")
hashseq <- hashseq[ order(row.names(hashseq)),]
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("Number of elements:", nrow(hashseq), collapse = " "))
print("Writing munged hashseq table.\n")
# write.table(hashseq, file = file.path(output_dir,"hashseq", "hashseq.csv"), 
#             sep = ",")
print("R script completed.")
print("Read data.")
hashseq <- data.frame(data.table::fread(file = file.path(output_dir,"hashseq", "SvTable.txt"),
                                        header=TRUE, data.table=FALSE), row.names = 1)
# hashseq <- hashseq[, colSums(hashseq != 0) > 0.01*nrow(hashseq)]#remove columns that don't have at least 10%
# print(paste("HashSeq has", ncol(hashseq), "columns after column reduction."))
print("Removing '_' ")
# my_names <- c()
# for (x in row.names(hashseq)){
#   my_name <- strsplit(x,"_")[[1]][1]
#   # print(my_name)
#   my_names <- c(my_name, my_names)
# }
my_names <- sapply(as.character(row.names(hashseq)), function(x) {
  strsplit(x,"_")[[1]][1]
  })
row.names(hashseq) <- my_names
print("Fixed formating of row names.")
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("number of elements:", nrow(hashseq), collapse = " "))
print("Attempting to reorder rownames based on ASV table from dada2\n")
hashseq <- hashseq[ order(row.names(hashseq)),]
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("Number of elements:", nrow(hashseq), collapse = " "))
print("Writing munged hashseq table.\n")
# write.table(hashseq, file = file.path(output_dir,"hashseq", "hashseq.csv"), 
#             sep = ",")
hashseq <- data.frame(data.table::fread(file = file.path(output_dir,"hashseq", "SvTable.txt"),
                                        header=TRUE, data.table=FALSE), row.names = 1)
# hashseq <- hashseq[, colSums(hashseq != 0) > 0.01*nrow(hashseq)]#remove columns that don't have at least 10%
# print(paste("HashSeq has", ncol(hashseq), "columns after column reduction."))
print("Removing '_' ")
row.names(hashseq) <- sapply(as.character(row.names(hashseq)), function(x) {
  strsplit(x,"_")[[1]][1]
  })
print("Fixed formating of row names.")
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("number of elements:", nrow(hashseq), collapse = " "))
print("Attempting to reorder rownames based on ASV table from dada2\n")
hashseq <- hashseq[ order(row.names(hashseq)),]
print("First 10 row names.")
print(paste(row.names(hashseq)[1:10], collapse = " "))
print("First 10 row names.")
print(paste(tail(row.names(hashseq), 10), collapse = " "))
print(paste("Number of elements:", nrow(hashseq), collapse = " "))
print("Writing munged hashseq table.\n")
# write.table(hashseq, file = file.path(output_dir,"hashseq", "hashseq.csv"), 
#             sep = ",")
write.table(hashseq, file = file.path(output_dir,"hashseq", "hashseq.csv"),
            sep = ",")
quit()
